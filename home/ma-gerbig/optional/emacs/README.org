:DOC-CONFIG:
# Tangle by default to init.el, which is the most common case
#+PROPERTY: header-args:emacs-lisp :tangle init.el
#+startup: fold
:END:

#+title: Emacs Configuration
#+author: Marc-Andre Gerbig

This is my personal GNU Emacs configuration file, inspired by a bunch of resources I’ve found online.
The =early-init.el= and =init.el= files are generated from this =*.org= document with =C-c C-v t=.

* Credits
| Name             | URL                                          |
|------------------+----------------------------------------------|
| Doom Emacs       | https://github.com/hlissner/doom-emacs       |
| Emmet            | https://github.com/librephoenix/nixos-config |
| Norman Walsh     | https://gitlab.com/ndw/dotfiles              |
| Protesilaos      | https://protesilaos.com/emacs/dotemacs       |
| Radon Rosborough | https://github.com/raxod502/radian           |
| SystemCrafter    | https://github.com/daviwil/dotfiles          |
| Zzamboni         | https://github.com/zzamboni/dot-doom/        |

* Early System Configuration (=early-init.el=)
:PROPERTIES:
:header-args:emacs-lisp: :tangle early-init.el
:END:
#+begin_quote
Emacs 27.1 introduced =early-init.el=, which is run before =init.el=, before package and UI initialization happens, and before site files are loaded.
#+end_quote

** File Headers
We start by simply defining the standard headers used by the two files.
These headers contain either some Emacs-LISP relevant indicators like =lexical-binding=, or instructions about the contents of the file.
#+html: <details><summary>early-init.el</summary>
#+begin_src emacs-lisp
;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://github.com/Deathlord89/nixos-config/blob/main/home/ma-gerbig/optional/emacs/README.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)
#+end_src
#+html: </details>

#+html: <details><summary>init.el</summary>
#+begin_src emacs-lisp :tangle init.el
;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://github.com/Deathlord89/nixos-config/blob/main/home/ma-gerbig/optional/emacs/README.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)
#+end_src
#+html: </details>

** Garbage Collection
A big contributor to startup times is garbage collection.
We up the gc threshold to temporarily prevent it from running, then reset it later by enabling =gcmh-mode=.
Not resetting it will cause stuttering/freezes.
#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
        gc-cons-percentage 0.6)
#+end_src

** Disable package-enable-at-startup
#+begin_quote
Package initialize occurs automatically, before =user-init-file= is loaded, but after =early-init-file=. We handle package initialization, so we must prevent Emacs from doing it early!
#+end_quote

Prevent =package.el= loading packages prior to their init-file loading.
While it is technically possible to use both =package.el= and =straight.el= at the same time, there is no real reason to, and it might result in oddities like packages getting loaded more than once.
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src

Prevent Emacs loading outdatet packages.
#+begin_src emacs-lisp
  (setq load-prefer-newer t)
#+end_src

** Unset file-name-handler-alist
Every file opened and loaded by Emacs will run through this list to check for a proper handler for the file, but during startup, it won’t need any of them.
#+begin_src emacs-lisp
  (defvar file-name-handler-alist-original file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src

** Disable unnecessary interfaces.
It will be faster to disable them here before they've been initialized.
#+begin_src emacs-lisp
  (setq-default
   default-frame-alist
   '((horizontal-scroll-bars . nil)       ; No horizontal scroll-bars
     (left-fringe . 10)                   ; Thin left fringe
     ;;(menu-bar-lines . 0)                 ; No menu bar
     (right-divider-width . 1)            ; Thin vertical window divider
     (right-fringe . 10)                  ; Thin right fringe
     (tool-bar-lines . 0)                 ; No tool bar
     (vertical-scroll-bars . nil)))       ; No vertical scroll-bars
#+end_src

** Restore some values after Emacs is started.
#+begin_quote
The =emacs-startup-hook= runs later than the =after-init-hook=.
One key difference is that there may be command-line options processed after the after-init-hook and before the emacs-startup-hook.
(Command-line options are handled in multiple phases, with some being processed right away and some after init files have been loaded.)
#+end_quote

#+begin_src emacs-lisp
  (defvar better-gc-cons-threshold (* 100 1024 1024)) ; 100MB
  
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (setq gc-cons-threshold better-gc-cons-threshold
		    gc-cons-percentage 0.1)
	      (setq file-name-handler-alist file-name-handler-alist-original)
	      (makunbound 'file-name-handler-alist-original)
	      (message "Emacs ready in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))
#+end_src

** Old init.el file
This snippet is no longer active!
#+begin_src emacs-lisp :tangle no
  (defvar my-init-el-start-time (current-time) "Time when init.el was started")
  (setq my-user-emacs-directory "~/.emacs.d/")
  
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  
  ;; Always use straight to install on systems other than Linux
  (setq straight-use-package-by-default t)
  
  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)
  
  ;; Load the helper package for commands like `straight-x-clean-unused-repos'
  (require 'straight-x)
  
  (defun ma/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))
  
  (use-package org
    :hook (org-mode . ma/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (ma/org-font-setup))
  
  ;; =======================================================================================
  ;; The init.el file looks for "config.org" and tangles its elisp blocks (matching
  ;; the criteria described below) to "config.el" which is loaded as Emacs configuration.
  ;; Inspired and copied from: http://www.holgerschurig.de/en/emacs-init-tangle/
  ;; As of 2021-02-05, the Domain "holgerschurig.de" doesn't exist any more.
  ;; Visit archived page on https://archive.org/search.php?query=http%3A%2F%2Fwww.holgerschurig.de%2Fen%2Femacs-init-tangle%2F
  ;; =======================================================================================
  
  ;; from: http://stackoverflow.com/questions/251908/how-can-i-insert-current-date-and-time-into-a-file-using-emacs
  (defvar current-date-time-format "%a %b %d %Y-%m-%dT%H:%M:%S "
    "Format of date to insert with `insert-current-date-time' func
  See help of `format-time-string' for possible replacements")
  
  ;; from: http://stackoverflow.com/questions/251908/how-can-i-insert-current-date-and-time-into-a-file-using-emacs
  (defvar current-time-format "%a %H:%M:%S"
    "Format of date to insert with `insert-current-time' func.
  Note the weekly scope of the command's precision.")
  
  (defun my-tangle-config-org ()
    "This function will write all source blocks from =config.org= into =config.el= that are ...
  - not marked as =tangle: no=
  - doesn't have the TODO state =DISABLED=
  - have a source-code of =emacs-lisp="
    (require 'org)
    (let* ((body-list ())
           (output-file (concat my-user-emacs-directory "config.el"))
           (org-babel-default-header-args (org-babel-merge-params org-babel-default-header-args
                                                                  (list (cons :tangle output-file)))))
      (message "—————• Re-generating %s …" output-file)
      (save-restriction
        (save-excursion
          (org-babel-map-src-blocks (concat my-user-emacs-directory "config.org")
            (let* (
                   (org_block_info (org-babel-get-src-block-info 'light))
                   ;;(block_name (nth 4 org_block_info))
                   (tfile (cdr (assq :tangle (nth 2 org_block_info))))
                   (match_for_TODO_keyword)
                   )
              (save-excursion
                (catch 'exit
                  ;;(when (string= "" block_name)
                  ;;  (message "Going to write block name: " block_name)
                  ;;  (add-to-list 'body-list (concat "message(\"" block_name "\")"));; adding a debug statement for named blocks
                  ;;  )
                  (org-back-to-heading t)
                  (when (looking-at org-outline-regexp)
                    (goto-char (1- (match-end 0))))
                  (when (looking-at (concat " +" org-todo-regexp "\\( +\\|[ \t]*$\\)"))
                    (setq match_for_TODO_keyword (match-string 1)))))
              (unless (or (string= "no" tfile)
                          (string= "DISABLED" match_for_TODO_keyword)
                          (not (string= "emacs-lisp" lang)))
                (add-to-list 'body-list (concat "\n\n;; #####################################################################################\n"
                                                "(message \"config • " (org-get-heading) " …\")\n\n")
                             )
                (add-to-list 'body-list body)
                ))))
        (with-temp-file output-file
          (insert ";; ============================================================\n")
          (insert ";; Don't edit this file, edit config.org' instead ...\n")
          (insert ";; Auto-generated at " (format-time-string current-date-time-format (current-time)) " on host " system-name "\n")
          (insert ";; ============================================================\n\n")
          (insert (apply 'concat (reverse body-list))))
        (message "—————• Wrote %s" output-file))))
  
  
  ;; following lines are executed only when my-tangle-config-org-hook-func()
  ;; was not invoked when saving config.org which is the normal case:
  (let ((orgfile (concat my-user-emacs-directory "config.org"))
        (elfile (concat my-user-emacs-directory "config.el"))
        (gc-cons-threshold most-positive-fixnum))
    (when (or (not (file-exists-p elfile))
              (file-newer-than-file-p orgfile elfile))
      (my-tangle-config-org)
      ;;(save-buffers-kill-emacs);; TEST: kill Emacs when config has been re-generated due to many issues when loading newly generated config.el
      )
    (load-file elfile))
  
  ;; when config.org is saved, re-generate config.el:
  (defun my-tangle-config-org-hook-func ()
    (when (string= "config.org" (buffer-name))
      (let ((orgfile (concat my-user-emacs-directory "config.org"))
            (elfile (concat my-user-emacs-directory "config.el")))
        (my-tangle-config-org))))
  (add-hook 'after-save-hook 'my-tangle-config-org-hook-func)
  
  
  (message "→★ loading init.el in %.2fs" (float-time (time-subtract (current-time) my-init-el-start-time)))
#+end_src

* Basic System Configuraten (=init.el=)
** Packagemanagement with straight.el
Init-file and version lockfiles as the sole source of truth.
No persistent state kept elsewhere.
100% reproducible package management, accounting for changes in packages, recipe repositories, configuration, and the package manager itself.
#+begin_quote
Note: =straight.el= supports a minimum version of Emacs 25.1, and works on macOS, Windows, and most flavors of Linux. You must install Git in order to use =straight.el=.
#+end_quote

=straight.el= determines your package management configuration from two, and only two, sources: the contents of your init-file, and your version lockfiles.
To write the current revisions of all your packages into version lockfiles, run =M-x straight-freeze-versions=.
This will first check that =straight.el= has an up-to-date account of what packages are installed by your init-file, then ensure that all your local changes are pushed (remember, we are aiming for perfect reproducibility!).

For updading the packages run =M-x straight-pull-package= to get the latest version of a given package (or =M-x straight-pull-all= to update everything), and then =M-x straight-freeze-versions= to persist the on-disk versions to your lockfile (=~/.emacs.d/straight/versions/default.el= by default).
You can run =M-x straight-thaw-versions= at any time to reset on-disk packages to their locked versions, making your config totally reproducible across environments. 

Sometimes it's good to clean up unused repositories if I've removed packages from my configuration.  Use =straight-remove-unused-repos= for this purpose.

Let's bootstrap [[https://github.com/raxod502/straight.el][straight.el]] with:
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

Load the helper package for commands like `straight-x-clean-unused-repos'
#+begin_src emacs-lisp
  (require 'straight-x)
#+end_src

If [[https://github.com/watchexec/watchexec][watchexec]] and [[https://www.python.org/][Python 3]] are installed, use file watchers to detect package modifications.
This saves time at startup.
Otherwise, use the ever-reliable =find(1)=.
#+begin_src emacs-lisp
  (if (and (executable-find "watchexec")
           (executable-find "python3"))
      (setq straight-check-for-modifications '(watch-files find-when-checking))
    (setq straight-check-for-modifications
          '(find-at-startup find-when-checking)))
#+end_src

*** Integration with use-package
=use-package= is a macro that provides convenient syntactic sugar for many common tasks related to installing and configuring Emacs packages.
Of course, it does not actually install the packages, but instead defers to a package manager, =like straight.el= (which comes with =use-package= integration by default).

To use =use-package=, first install it with =straight.el=:
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

Use =straight.el= for =use-package= expressions:
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)    
#+end_src

Like =use-package=, but with =straight-use-package-by-default= disabled.
NAME and ARGS are as in =use-package=.
[[https://github.com/raxod502/radian/blob/58ba58bd827e719c0eeb3d3c996d59cf4d00acd5/emacs/radian.el#L542][use-feature]] macro by [[*Credits][Radox502]]:
#+begin_src emacs-lisp
  (defmacro use-feature (name &rest args)
    (declare (indent defun))
    `(use-package ,name
       :straight nil
       ,@args))
#+end_src

*** Native Compilation
#+begin_src emacs-lisp
  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors nil)

  ;; Set the right directory to store the native comp cache
  (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))
#+end_src

** Change default settings
#+BEGIN_SRC emacs-lisp
  (setq-default
   ad-redefinition-action 'accept         ; Silence warnings for redefinition
   auto-save-list-file-prefix nil         ; Prevent tracking for auto-saves
   cursor-in-non-selected-windows nil     ; Hide the cursor in inactive windows
   cursor-type '(hbar . 2)                ; Underline-shaped cursor
   custom-unlispify-menu-entries nil      ; Prefer kebab-case for titles
   custom-unlispify-tag-names nil         ; Prefer kebab-case for symbols
   delete-by-moving-to-trash t            ; Delete files to trash
   ;; fill-column 80                        ; Set width for automatic line breaks
   help-window-select t                   ; Focus new help windows when opened
   indent-tabs-mode nil                   ; Stop using tabs to indent
   inhibit-startup-screen t               ; Disable start-up screen
   initial-scratch-message ""             ; Empty the initial *scratch* buffer
   mouse-yank-at-point t                  ; Yank at point rather than pointer
   recenter-positions '(5 top bottom)     ; Set re-centering positions
   scroll-conservatively 101              ; Avoid recentering when scrolling far
   scroll-margin 2                        ; Add a margin when scrolling vertically
   select-enable-clipboard t              ; Merge system's and Emacs' clipboard
   sentence-end-double-space nil          ; Use a single space after dots
   ;; show-help-function nil                ; Disable help text everywhere
   tab-always-indent 'complete            ; Tab indents first then tries completions
   tab-width 4                            ; Smaller width for tab characters
   uniquify-buffer-name-style 'forward    ; Uniquify buffer names
   warning-minimum-level :error           ; Skip warning buffers
   window-combination-resize t            ; Resize windows proportionally
   x-stretch-cursor t)                    ; Stretch cursor to the glyph width
  (delete-selection-mode 1)               ; Replace region when inserting text
  (fset 'yes-or-no-p 'y-or-n-p)           ; Replace yes/no prompts with y/n
  (global-subword-mode 1)                 ; Iterate through CamelCase words
  (mouse-avoidance-mode 'exile)           ; Avoid collision of mouse with point
  (put 'downcase-region 'disabled nil)    ; Enable downcase-region
  (put 'upcase-region 'disabled nil)      ; Enable upcase-region
  (set-default-coding-systems 'utf-8)     ; Default to utf-8 encoding
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  ;;(tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  ;;(menu-bar-mode -1)          ; Disable the menu bar
  (save-place-mode 1)         ; Save the last cursor position

  ;; Set up the visible bell
  (setq visible-bell t)

#+END_SRC

Global line numbering is helpful, but not useful for all modes.
#+begin_src emacs-lisp
  ;; Show line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode'(org-mode-hook
                 term-mode-hook
                 shell-mode-hook
                 eshell-mode-hook
                 mu4e-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

The =global-auto-revert-mode= will make Emacs watch the files for all open buffers for changes on disk and it will autmatically refresh those buffers if they don't have unsaved changes!
The same applys to =global-auto-revert-non-file-buffers= for directories.
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers 1)
#+end_src

** Keep emacs.d clean
The default paths used to store configuration files and persistent data are not consistent across Emacs packages.
This isn't just a problem with third-party packages but even with built-in packages.

Some packages put these files directly in =user-emacs-directory= or $HOME or in a subdirectory of either of the two or elsewhere.
Furthermore sometimes file names are used that don't provide any insight into what package might have created them.

[[https://github.com/emacscollective/no-littering][No-littering]] sets out to fix this by changing the values of path variables to put configuration files in =no-littering-etc-directory= (defaulting to "etc/" under =user-emacs-directory=, thus usually "~/.config/emacs/etc/") and persistent data files in =no-littering-var-directory= (defaulting to "var/" under =user-emacs-directory=, thus usually "~/.emacs.d/var/"), and by using descriptive file names and subdirectories when appropriate.
This is similar to a color-theme; a "path-theme" if you will.
#+begin_src emacs-lisp
  ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))
  
  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (use-package no-littering)
  
  ;; Keep customization settings in a temporary file (thanks Ambrevar!)
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)
#+end_src

Disable =customize-*= routine and redirect the writing to =/dev/null=.
#+BEGIN_SRC emacs-lisp
  (setq-default custom-file null-device)
#+END_SRC

* User Interface
** Doom Theme
=doom-modeline= is a fancy and fast mode-line inspired by minimalism design
NOTE: The first time you load your configuration on a new machine, you'll need to run the following command interactively so that mode line icons display correctly =M-x nerd-icons-install-fonts=.
#+BEGIN_SRC emacs-lisp
    (use-package nerd-icons)
    (use-package doom-modeline
      :ensure t
      ;;:init (doom-modeline-mode 1)
      :hook (after-init . doom-modeline-mode)
      :config
      (setq doom-modeline-height 30
            doom-modeline-bar-width 6))
#+END_SRC
  
[[https://github.com/hlissner/emacs-doom-themes][Doom Theme]] - A theme megapack for GNU Emacs, inspired by community favorites.
I use the custom =stylix=-enabled =mustache= theme template from [[https://github.com/librephoenix/nixos-config/blob/7a5b01ab7de1127a9ba13f88c39e4bccbc73f6ac/user/app/doom-emacs/themes/doom-stylix-theme.el.mustache][librephoenix]].
#+BEGIN_SRC emacs-lisp
  (setq custom-theme-directory "~/.config/emacs/themes")
  (use-package doom-themes :defer t)
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;;(load-theme 'doom-palenight t)
  (load-theme 'doom-stylix t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;; (doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;; (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
    #+END_SRC

* Key Binding Configuration
** Make ESC quit prompts
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

This keybinding is overridden by evil.
To activate an alternate =universal-argument= binding enable the following codeblock.
#+BEGIN_SRC amacs-lisp :tangle no
(global-set-key (kbd "C-M-u") 'universal-argument)
#+END_SRC

** Change Leader with =general.el=
With the help of =general.el=, it is easy to manage key combinations and also serves as a wrapper for =wich-key=.
- =:ignore t= and =:which-key= bind nothing but give a description.
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-create-definer ma/leader-key-def
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (ma/leader-key-def
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")))
#+END_SRC

** Evil mode
- =C-z= Toggle =emacs-mode= (disable evil  keybindings)
- =C-g= Expand the default emacs "Exit" function with evils "normal" state
#+BEGIN_SRC emacs-lisp
  (defun ma/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))
  
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)
    :config
    (add-hook 'evil-mode-hook 'ma/evil-hook)
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  
    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC

** Ivy
flexible, simple tool for completion in Emacs
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-f" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-wrap t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)

    ;; Use different regex strategies per completion command
    ;;(push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist) ;; This doesn't seem to work...
    ;;(push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
    ;;(push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)

    ;; Set minibuffer height for different commands
    (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
    (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
    (setf (alist-get 'swiper ivy-height-alist) 15)
    (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1)
    :after counsel
    :config
    (setq ivy-format-function #'ivy-format-function-line)
    (setq ivy-rich-display-transformers-list
          (plist-put ivy-rich-display-transformers-list
                     'ivy-switch-buffer
                     '(:columns
                       ((ivy-rich-candidate (:width 40))
                        (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
                        (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
                        (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
                        (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
                       :predicate
                       (lambda (cand)
                         (if-let ((buffer (get-buffer cand)))
                             ;; Don't mess with EXWM buffers
                             (with-current-buffer buffer
                               (not (derived-mode-p 'exwm-mode)))))))))

  (use-package counsel
    :demand t
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ("C-M-j" . counsel-switch-buffer)
           ("C-M-l" . counsel-imenu)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

  (use-package flx  ;; Improves sorting for fuzzy-matched results
    :after ivy
    :init
    (setq ivy-flx-limit 10000))

  (use-package wgrep)

  (use-package ivy-posframe
    :disabled
    :custom
    (ivy-posframe-width      115)
    (ivy-posframe-min-width  115)
    (ivy-posframe-height     10)
    (ivy-posframe-min-height 10)
    :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    (setq ivy-posframe-parameters '((parent-frame . nil)
                                    (left-fringe . 8)
                                    (right-fringe . 8)))
    (ivy-posframe-mode 1))

  (use-package prescient
    :after counsel
    :config
    (prescient-persist-mode 1))

  (use-package ivy-prescient
    :after prescient
    :config
    (ivy-prescient-mode 1))

  (ma/leader-key-def
    "r"   '(ivy-resume :which-key "ivy resume")
    "f"   '(:ignore t :which-key "files")
    "ff"  '(counsel-find-file :which-key "open file")
    "C-f" 'counsel-find-file
    "fr"  '(counsel-recentf :which-key "recent files")
    "fR"  '(revert-buffer :which-key "revert file")
    "fj"  '(counsel-file-jump :which-key "jump to file"))
#+END_SRC

Better help funtions
#+BEGIN_SRC emacs-lisp 
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))
#+END_SRC

Use =SPC e b= to run =eval-buffer= or =SPC e r= to run =eval-region= in the highlighted block. 
#+BEGIN_SRC emacs-lisp 
  (ma/leader-key-def
    "e"  '(:ignore t :which-key "eval")
    "eb" '(eval-buffer :which-key "eval buffer"))

  (ma/leader-key-def
    :keymaps '(visual)
    "er" '(eval-region :which-key "eval region"))
#+END_SRC

* Features
** Parentheses
Highlights delimiters (parentheses, brackets or braces).
#+BEGIN_SRC emacs-lisp 
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

Enable auto close bracket insertion.
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :bind
    ("<M-backspace>" . sp-unwrap-sexp)
    ("<M-left>" . sp-forward-barf-sexp)
    ("<M-right>" . sp-forward-slurp-sexp)
    ("<M-S-left>" . sp-backward-slurp-sexp)
    ("<M-S-right>" . sp-backward-barf-sexp)
    :hook
    (after-init . smartparens-global-mode)
    :custom
    (sp-highlight-pair-overlay t)
    (sp-highlight-wrap-overlay t)
    (sp-highlight-wrap-tag-overlay t)
    :config
    (require 'smartparens-config))
#+END_SRC

** Undotree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode 1))
#+END_SRC

** Qualitiy of Life
Colorize colors as text with their value.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :hook
    (prog-mode . rainbow-mode)
    :custom
    (rainbow-x-colors nil))
#+END_SRC

[[https://github.com/justbur/emacs-which-key][Which-key]] is great for getting an overview of what keybindings are available based on the prefix keys you entered.
Learned about this one from Spacemacs.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.5))
#+END_SRC
